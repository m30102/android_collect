/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_fan_collect_java_jni_JniTest */
/*
 * https://blog.51cto.com/u_11495341/3040148
 * 若是c++编译器实现h,那么extern c 表示告诉c++编译器 {}里面的内容是以c的形式编译.
 * 若c实现这个h，那么通过c++编译器编译.c后，成为c的obj格式文件，c++直接引入h可直接调用
 * 若c++实现这个h，那么cpp的实现也要加上extern "C", 通过c++编译器编译.cpp后, 成为c的obj格式文件， c可以直接引入h调用
 *
 * .h文件都要这样写，只不过.c不需要在函数中extern "C"，cpp需要。
 *
 * JNIEXPORT 是宏定义，表示一个函数需要暴露给共享库外部使用时JNIEXPORT 在 Window 和 Linux 上有不同的定义：
 * JNICALL 表示一个函数是 JNI 函数
 * 
 * cmd 执行 而不是 powershell 执行
 * gcc -I %JAVA_HOME%\include -I %JAVA_HOME%\include\win32  -fPIC -shared -o Jnitest-c.dll   test.c
 * g++ -I %JAVA_HOME%\include -I %JAVA_HOME%\include\win32  -fPIC -shared -o Jnitest-cpp.dll   test.cpp
 * 
 * 
 *
 */
#ifndef _Included_com_fan_collect_java_jni_JniTest
#define _Included_com_fan_collect_java_jni_JniTest
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_fan_collect_java_jni_JniTest
 * Method:    get
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_fan_collect_java_jni_JniTest_get
  (JNIEnv *, jobject);

/*
 * Class:     com_fan_collect_java_jni_JniTest
 * Method:    set
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_fan_collect_java_jni_JniTest_set
  (JNIEnv *, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
